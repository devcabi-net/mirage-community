version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mirage_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: mirage_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: mirage_community
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mirage_user -d mirage_community"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: mirage_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: mirage_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://mirage_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/mirage_community
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    command: sh -c "npm run prisma:deploy && npm run start"

  # Discord Bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    container_name: mirage_bot
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://mirage_user:${POSTGRES_PASSWORD:-changeme}@postgres:5432/mirage_community
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      DISCORD_GUILD_ID: ${DISCORD_GUILD_ID}
      DISCORD_BOT_CLIENT_ID: ${DISCORD_BOT_CLIENT_ID}
      ENABLE_MODERATION_API: ${ENABLE_MODERATION_API:-true}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./logs:/app/logs
    command: npm run start:bot

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mirage_nginx
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./uploads:/var/www/uploads:ro
      - ./public:/var/www/public:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: mirage_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # SFTP Server (optional)
  sftp:
    image: atmoz/sftp:alpine
    container_name: mirage_sftp
    restart: unless-stopped
    volumes:
      - ./uploads:/home/sftp/uploads
      - ./config/sftp/users.conf:/etc/sftp/users.conf:ro
      - ./config/sftp/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key:ro
      - ./config/sftp/ssh_host_ed25519_key:/etc/ssh/ssh_host_ed25519_key:ro
    ports:
      - "2222:22"
    command: /bin/sh -c 'chmod 600 /etc/ssh/ssh_host_* && /entrypoint'

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: mirage_network 